import React, { useState, useEffect, useCallback } from 'react';
import ServiceGestion from './modules/ServiceGestion';
import UniteGestion from './modules/UniteGestion';
import TypeTarifGestion from './modules/TypeTarifGestion';
import TarifStandardGestion from './modules/TarifStandardGestion';
import TarifSpecialGestion from './modules/TarifSpecialGestion';
import TarificationService from './services/TarificationService';
import ClientService from './services/ClientService';
import ConfirmationModal from './components/shared/ConfirmationModal';
import ServiceUniteGestion from './modules/ServiceUniteGestion';
import './TarifGestion.css';

const TarifGestion = () => {
  // États de base du composant principal
  const [activeTab, setActiveTab] = useState('services');
  const [isLoading, setIsLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [debugInfo, setDebugInfo] = useState('');
  const [confirmModal, setConfirmModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: null,
    type: 'warning',
    confirmText: 'Confirmer',
    entityType: ''
  });

  // Services
  const [tarificationService, setTarificationService] = useState(null);
  const [clientService] = useState(new ClientService());

  // États partagés entre composants
  const [services, setServices] = useState([]);
  const [unites, setUnites] = useState([]);
  const [typesTarifs, setTypesTarifs] = useState([]);
  const [tarifs, setTarifs] = useState([]);
  const [tarifsSpeciaux, setTarifsSpeciaux] = useState([]);
  const [clients, setClients] = useState([]);
  const [serviceUnites, setServiceUnites] = useState({});
  const [defaultUnites, setDefaultUnites] = useState({});
  const [selectedServiceId, setSelectedServiceId] = useState('');

  // Fonction de débogage pour explorer toutes les sources possibles de données utilisateur
  const debugUserData = () => {
    const debugData = [];
    
    // 1. window.USER_DATA
    debugData.push(`window.USER_DATA: ${JSON.stringify(window.USER_DATA)}`);
    
    // 2. localStorage
    debugData.push(`localStorage length: ${localStorage.length}`);
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      const value = localStorage.getItem(key);
      debugData.push(`localStorage.${key}: ${value}`);
    }
    
    // 3. sessionStorage
    debugData.push(`sessionStorage length: ${sessionStorage.length}`);
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      const value = sessionStorage.getItem(key);
      debugData.push(`sessionStorage.${key}: ${value}`);
    }
    
    // 4. Variables globales communes
    debugData.push(`window.currentUser: ${JSON.stringify(window.currentUser)}`);
    debugData.push(`window.user: ${JSON.stringify(window.user)}`);
    debugData.push(`window.authData: ${JSON.stringify(window.authData)}`);
    
    return debugData.join('\n');
  };

  // Vérification d'autorisation avec débogage complet
  useEffect(() => {
    const checkAuthorization = () => {
      try {
        console.log('=== DÉBUT DU DÉBOGAGE D\'AUTORISATION ===');
        
        // Générer les informations de debug
        const debug = debugUserData();
        setDebugInfo(debug);
        console.log('Informations de débogage:', debug);
        
        let userRole = null;
        let userFound = false;
        
        // Méthode 1: window.USER_DATA
        if (window.USER_DATA) {
          console.log('window.USER_DATA trouvé:', window.USER_DATA);
          if (window.USER_DATA.role) {
            userRole = window.USER_DATA.role;
            userFound = true;
            console.log('Rôle trouvé dans window.USER_DATA:', userRole);
          }
        }
        
        // Méthode 2: localStorage.userRole
        if (!userFound && localStorage.getItem('userRole')) {
          userRole = localStorage.getItem('userRole');
          userFound = true;
          console.log('Rôle trouvé dans localStorage.userRole:', userRole);
        }
        
        // Méthode 3: localStorage.userData
        if (!userFound) {
          try {
            const userData = localStorage.getItem('userData');
            if (userData) {
              const parsedData = JSON.parse(userData);
              console.log('userData parsé:', parsedData);
              if (parsedData.role) {
                userRole = parsedData.role;
                userFound = true;
                console.log('Rôle trouvé dans localStorage.userData:', userRole);
              }
            }
          } catch (e) {
            console.log('Erreur parsing userData:', e);
          }
        }
        
        // Méthode 4: sessionStorage
        if (!userFound && sessionStorage.getItem('userRole')) {
          userRole = sessionStorage.getItem('userRole');
          userFound = true;
          console.log('Rôle trouvé dans sessionStorage:', userRole);
        }
        
        // Méthode 5: Variables globales alternatives
        if (!userFound && window.currentUser && window.currentUser.role) {
          userRole = window.currentUser.role;
          userFound = true;
          console.log('Rôle trouvé dans window.currentUser:', userRole);
        }
        
        if (!userFound && window.user && window.user.role) {
          userRole = window.user.role;
          userFound = true;
          console.log('Rôle trouvé dans window.user:', userRole);
        }
        
        console.log('Résultat final - userRole:', userRole, 'userFound:', userFound);
        
        // MODE DÉVELOPPEMENT : Autoriser temporairement tous les accès
        const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';
        
        if (isDevelopment) {
          console.log('MODE DÉVELOPPEMENT - Accès autorisé par défaut');
          setIsAuthorized(true);
          setMessage('Mode développement - Accès autorisé temporairement');
          setMessageType('info');
          return;
        }
        
        // Vérification des rôles autorisés
        const rolesAutorises = ['admin', 'gestionnaire'];
        
        if (!userRole) {
          console.warn('Aucun rôle utilisateur trouvé');
          setMessage('Impossible de déterminer vos droits d\'accès. Données de débogage disponibles dans la console.');
          setMessageType('error');
          setIsAuthorized(false);
          return;
        }
        
        if (!rolesAutorises.includes(userRole.toLowerCase())) {
          console.warn('Accès non autorisé à la gestion des tarifs pour le rôle:', userRole);
          setMessage(`Accès refusé. Votre rôle (${userRole}) ne permet pas d'accéder à cette page.`);
          setMessageType('error');
          setIsAuthorized(false);
          return;
        }
        
        // Utilisateur autorisé
        setIsAuthorized(true);
        setMessage(`Accès autorisé pour le rôle: ${userRole}`);
        setMessageType('success');
        console.log('Accès autorisé pour le rôle:', userRole);
        
      } catch (error) {
        console.error('Erreur lors de la vérification d\'autorisation:', error);
        setMessage('Erreur lors de la vérification des droits d\'accès: ' + error.message);
        setMessageType('error');
        setIsAuthorized(false);
      } finally {
        setIsLoading(false);
        console.log('=== FIN DU DÉBOGAGE D\'AUTORISATION ===');
      }
    };
    
    checkAuthorization();
  }, []);
  
  // Fonction pour fermer manuellement le message
  const handleDismissMessage = () => {
    setMessage('');
    setMessageType('');
  };

  // Fonction pour fermer la modal de confirmation
  const handleCancelConfirm = () => {
    setConfirmModal(prev => ({ ...prev, isOpen: false }));
  };

  // Fonction pour basculer l'affichage des informations de debug
  const toggleDebugInfo = () => {
    console.log('Informations de débogage complètes:');
    console.log(debugInfo);
    alert('Informations de débogage affichées dans la console. Appuyez sur F12 pour voir.');
  };

  // Chargement des données (simplifié pour le test)
  const loadServices = async (service = tarificationService) => {
    try {
      if (!service) {
        console.error('Service de tarification non initialisé');
        return;
      }
      
      const servicesData = await service.chargerServices();
      setServices(Array.isArray(servicesData) ? servicesData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des services:', error);
      setMessage('Erreur lors du chargement des services: ' + error.message);
      setMessageType('error');
      setServices([]);
    }
  };

  const loadUnites = async (service = tarificationService) => {
    try {
      if (!service) return;
      const unitesData = await service.chargerUnites();
      setUnites(Array.isArray(unitesData) ? unitesData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des unités:', error);
      setMessage('Erreur lors du chargement des unités: ' + error.message);
      setMessageType('error');
      setUnites([]);
    }
  };

  const loadUnitesByService = async (serviceId) => {
    try {
      if (!tarificationService) return;
      const unitesForService = await tarificationService.chargerUnites(serviceId);
      setServiceUnites(prev => ({
        ...prev,
        [serviceId]: Array.isArray(unitesForService) ? unitesForService : []
      }));
    } catch (error) {
      console.error('Erreur lors du chargement des unités par service:', error);
    }
  };

  const loadTypesTarifs = async (service = tarificationService) => {
    try {
      if (!service) return;
      const typesTarifsData = await service.chargerTypesTarifs();
      setTypesTarifs(Array.isArray(typesTarifsData) ? typesTarifsData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des types de tarifs:', error);
      setTypesTarifs([]);
    }
  };

  const loadTarifs = async () => {
    try {
      if (!tarificationService) return;
      const tarifsData = await tarificationService.getTarifs();
      setTarifs(Array.isArray(tarifsData) ? tarifsData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des tarifs:', error);
      setTarifs([]);
    }
  };

  const loadTarifsSpeciaux = async () => {
    try {
      if (!tarificationService) return;
      if (typeof tarificationService.getTarifsSpeciaux !== 'function') return;
      const tarifsSpeciauxData = await tarificationService.getTarifsSpeciaux();
      setTarifsSpeciaux(Array.isArray(tarifsSpeciauxData) ? tarifsSpeciauxData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des tarifs spéciaux:', error);
      setTarifsSpeciaux([]);
    }
  };

  const loadClients = useCallback(async () => {
    try {
      if (!clientService) return;
      const clientsData = await clientService.chargerClients();
      setClients(Array.isArray(clientsData) ? clientsData : []);
    } catch (error) {
      console.error('Erreur lors du chargement des clients:', error);
      setClients([]);
    }
  }, [clientService]);

  // Initialisation du service de tarification
  useEffect(() => {
    if (!isAuthorized) return;
    
    const initTarificationService = async () => {
      try {
        console.log('Initialisation du service de tarification...');
        const service = new TarificationService();
        await service.initialiser();
        setTarificationService(service);
        console.log('Service de tarification initialisé avec succès');
        
        // Charger toutes les données
        await Promise.all([
          loadServices(service),
          loadUnites(service),
          loadTypesTarifs(service),
          loadTarifs(),
          loadTarifsSpeciaux(),
          loadClients()
        ]);
        
      } catch (error) {
        console.error('Erreur lors de l\'initialisation:', error);
        setMessage('Erreur lors de l\'initialisation: ' + error.message);
        setMessageType('error');
      }
    };

    initTarificationService();
  }, [isAuthorized, loadClients]);

  // Si l'utilisateur n'est pas autorisé, afficher la page de debug
  if (!isAuthorized && !isLoading) {
    return (
      <div className="content-section-container">
        <div className="content-section-title">
          <h2>Gestion des tarifs - Accès refusé</h2>
          {message && (
            <div className={`alert ${messageType === 'success' ? 'alert-success' : messageType === 'info' ? 'alert-info' : 'alert-danger'}`}>
              {message}
              <button 
                type="button" 
                className="close-message" 
                onClick={handleDismissMessage}
                aria-label="Fermer"
              >
                &times;
              </button>
            </div>
          )}
        </div>
        
        <div className="unauthorized-access">
          <h3>Informations de débogage</h3>
          <p>Pour identifier le problème d'autorisation, cliquez sur le bouton ci-dessous pour afficher les informations de débogage dans la console :</p>
          
          <button 
            onClick={toggleDebugInfo}
            style={{
              background: '#007bff',
              color: 'white',
              border: 'none',
              padding: '10px 20px',
              borderRadius: '5px',
              cursor: 'pointer',
              margin: '10px 0'
            }}
          >
            Afficher les informations de débogage
          </button>
          
          <div style={{
            background: '#f8f9fa',
            border: '1px solid #dee2e6',
            borderRadius: '5px',
            padding: '15px',
            marginTop: '20px',
            fontSize: '12px',
            fontFamily: 'monospace',
            whiteSpace: 'pre-wrap',
            maxHeight: '300px',
            overflow: 'auto'
          }}>
            {debugInfo}
          </div>
          
          <p style={{ marginTop: '20px' }}>
            <strong>Solutions possibles :</strong>
          </p>
          <ul>
            <li>Vérifiez que vous êtes bien connecté</li>
            <li>Vérifiez que votre rôle est défini comme 'admin' ou 'gestionnaire'</li>
            <li>Contactez votre administrateur si le problème persiste</li>
          </ul>
        </div>
      </div>
    );
  }

  // Rendu des onglets (version simplifiée pour le test)
  const renderTabs = () => {
    return (
      <div className="tarif-gestion-tabs">
        <div 
          className={`tarif-tab ${activeTab === 'services' ? 'active' : ''}`}
          onClick={() => setActiveTab('services')}
        >
          Services
        </div>
        <div 
          className={`tarif-tab ${activeTab === 'unites' ? 'active' : ''}`}
          onClick={() => setActiveTab('unites')}
        >
          Unités
        </div>
        {/* Autres onglets... */}
      </div>
    );
  };

  // Rendu du contenu (version simplifiée pour le test)
  const renderContent = () => {
    return (
      <div>
        <p>Contenu de l'onglet : {activeTab}</p>
        <p>Services chargés : {services.length}</p>
        <p>Unités chargées : {unites.length}</p>
      </div>
    );
  };

  // Rendu principal
  return (
    <div className="content-section-container">
      <div className="content-section-title">
        <h2>Gestion des tarifs</h2>
        {message && (
          <div className={`alert ${messageType === 'success' ? 'alert-success' : messageType === 'info' ? 'alert-info' : 'alert-danger'}`}>
            {message}
            <button 
              type="button" 
              className="close-message" 
              onClick={handleDismissMessage}
              aria-label="Fermer"
            >
              &times;
            </button>
          </div>
        )}
      </div>
      
      <div className="tarif-gestion-container">
        {isLoading ? (
          <div className="loading-container">
            <p>Chargement des données...</p>
          </div>
        ) : (
          <>
            {renderTabs()}
            {renderContent()}
          </>
        )}
      </div>
    </div>
  );
};

export default TarifGestion;