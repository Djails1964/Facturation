/**
 * Service de gestion des clients - VERSION MISE √Ä JOUR avec gestion des bool√©ens
 * @class ClientService
 * @description G√®re l'acc√®s aux donn√©es des clients via l'API
 */
import api from './api';
import { toBoolean, toBooleanInt, normalizeBooleanFields, normalizeBooleanFieldsArray } from '../utils/booleanHelper';

class ClientService {
  constructor() {
    this.clients = [];
    this._cacheClient = {}; // Cache pour les clients fr√©quemment consult√©s
    
    // Bind des m√©thodes pour s'assurer que 'this' est correctement d√©fini
    this.chargerClients = this.chargerClients.bind(this);
    this.getClient = this.getClient.bind(this);
    this.createClient = this.createClient.bind(this);
    this.updateClient = this.updateClient.bind(this);
    this.deleteClient = this.deleteClient.bind(this);
    this.checkClientDeletable = this.checkClientDeletable.bind(this);
    this.isValidEmail = this.isValidEmail.bind(this);
    this.detectPhoneType = this.detectPhoneType.bind(this);
    this._cleanPhoneNumber = this._cleanPhoneNumber.bind(this);
    this._clearCache = this._clearCache.bind(this);
    this.estTherapeute = this.estTherapeute.bind(this);
    this.normalizeClient = this.normalizeClient.bind(this);
    this.normalizeClients = this.normalizeClients.bind(this);
  }

  /**
   * Normalise les propri√©t√©s bool√©ennes d'un client
   * @param {Object} client - Client √† normaliser
   * @returns {Object} - Client avec propri√©t√©s bool√©ennes normalis√©es
   */
  normalizeClient(client) {
    if (!client || typeof client !== 'object') {
      return client;
    }
    
    return normalizeBooleanFields(client, ['estTherapeute']);
  }

  /**
   * Normalise les propri√©t√©s bool√©ennes d'un tableau de clients
   * @param {Array} clients - Tableau de clients √† normaliser
   * @returns {Array} - Clients avec propri√©t√©s bool√©ennes normalis√©es
   */
  normalizeClients(clients) {
    if (!Array.isArray(clients)) {
      return clients;
    }
    
    return normalizeBooleanFieldsArray(clients, ['estTherapeute']);
  }

  /**
   * Charge tous les clients disponibles
   * @returns {Promise<Array>} Liste des clients avec bool√©ens normalis√©s
   */
  async chargerClients() {
    try {
      const response = await api.get('client-api.php');
      
      if (response && response.success && response.clients) {
        // ‚úÖ NORMALISATION DES BOOL√âENS AVEC LE HELPER
        const normalizedClients = this.normalizeClients(response.clients);
        
        console.log('Clients avant normalisation:', response.clients.slice(0, 2));
        console.log('Clients apr√®s normalisation:', normalizedClients.slice(0, 2));
        
        // Mise √† jour de la liste interne
        this.clients = normalizedClients;
        return normalizedClients;
      }
      return [];
    } catch (error) {
      console.error('Erreur lors du chargement des clients:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les d√©tails d'un client sp√©cifique
   * @param {string|number} id ID du client
   * @returns {Promise<Object|null>} Donn√©es du client ou null si non trouv√©
   */
  async getClient(id) {
    try {
      // V√©rifier si le client est d√©j√† dans le cache
      if (this._cacheClient[id]) {
        return this._cacheClient[id];
      }
      
      const response = await api.get(`client-api.php?id=${id}`);
      
      if (response && response.success && response.client) {
        // ‚úÖ NORMALISATION DU CLIENT AVEC LE HELPER
        const normalizedClient = this.normalizeClient(response.client);
        
        console.log('Client avant normalisation:', response.client);
        console.log('Client apr√®s normalisation:', normalizedClient);
        
        // Mettre √† jour le cache
        this._cacheClient[id] = normalizedClient;
        return normalizedClient;
      }
      return null;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du client ${id}:`, error);
      return null;
    }
  }

  /**
   * Cr√©e un nouveau client
   * @param {Object} clientData Donn√©es du client
   * @returns {Promise<Object>} R√©sultat de la cr√©ation
   */
  async createClient(clientData) {
    try {
      // ‚úÖ PR√âPARATION DES DONN√âES AVEC NORMALISATION BOOL√âENNE
      const preparedData = {
        ...clientData,
        // Conversion s√©curis√©e du bool√©en estTherapeute pour l'API
        estTherapeute: toBooleanInt(clientData.estTherapeute)
      };
      
      console.log('Cr√©ation client - donn√©es d\'entr√©e:', clientData);
      console.log('Cr√©ation client - donn√©es normalis√©es:', preparedData);
      
      // Si le t√©l√©phone est fourni, s'assurer qu'il est au format propre
      if (preparedData.telephone) {
        preparedData.telephone = this._cleanPhoneNumber(preparedData.telephone);
      }
      
      const response = await api.post('client-api.php', preparedData);
      
      if (response && response.success) {
        // Invalider le cache apr√®s cr√©ation
        this._clearCache();
        return {
          success: true,
          id: response.id,
          message: response.message || 'Client cr√©√© avec succ√®s'
        };
      } else {
        throw new Error(response?.message || 'Erreur lors de la cr√©ation du client');
      }
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du client:', error);
      throw error;
    }
  }

  /**
   * Met √† jour un client existant
   * @param {string|number} id ID du client
   * @param {Object} clientData Donn√©es mises √† jour
   * @returns {Promise<Object>} R√©sultat de la mise √† jour
   */
  async updateClient(id, clientData) {
    try {
      console.log('‚úèÔ∏è DEBUG - updateClient appel√© pour:', id);
      console.log('‚úèÔ∏è DEBUG - Session cookies:', document.cookie);
      console.log('‚úèÔ∏è DEBUG - Session stock√©e:', window.currentSessionId);
      
      // ‚úÖ PR√âPARATION DES DONN√âES AVEC NORMALISATION BOOL√âENNE
      const preparedData = {
        ...clientData,
        // Conversion s√©curis√©e du bool√©en estTherapeute pour l'API
        estTherapeute: toBooleanInt(clientData.estTherapeute)
      };
      
      console.log('Mise √† jour client - donn√©es d\'entr√©e:', clientData);
      console.log('Mise √† jour client - donn√©es normalis√©es:', preparedData);
      
      // Si le t√©l√©phone est fourni, s'assurer qu'il est au format propre
      if (preparedData.telephone) {
        preparedData.telephone = this._cleanPhoneNumber(preparedData.telephone);
      }
      
      const response = await api.put(`client-api.php?id=${id}`, preparedData);
      
      if (response && response.success) {
        // Invalider le cache apr√®s mise √† jour
        delete this._cacheClient[id];
        return {
          success: true,
          message: response.message || 'Client modifi√© avec succ√®s'
        };
      } else {
        throw new Error(response?.message || 'Erreur lors de la modification du client');
      }
    } catch (error) {
      console.error(`Erreur lors de la mise √† jour du client ${id}:`, error);
      throw error;
    }
  }

  /**
   * Supprime un client
   * @param {string|number} id ID du client √† supprimer
   * @returns {Promise<Object>} R√©sultat de la suppression
   */
  async deleteClient(id) {
    try {
      const response = await api.delete(`client-api.php?id=${id}`);
      
      if (response && response.success) {
        // Invalider le cache apr√®s suppression
        delete this._cacheClient[id];
        return {
          success: true,
          message: response.message || 'Client supprim√© avec succ√®s'
        };
      } else {
        throw new Error(response?.message || 'Erreur lors de la suppression du client');
      }
    } catch (error) {
      console.error(`Erreur lors de la suppression du client ${id}:`, error);
      throw error;
    }
  }

  /**
   * V√©rifie si un client peut √™tre supprim√© (n'a pas de factures associ√©es)
   * @param {string|number} id ID du client √† v√©rifier
   * @returns {Promise<Object>} R√©sultat de la v√©rification
   */
  async checkClientDeletable(id) {
    try {
      console.log('üîç DEBUG - checkClientDeletable appel√© pour:', id);
      console.log('üîç DEBUG - Session cookies:', document.cookie);
      console.log('üîç DEBUG - Session stock√©e:', window.currentSessionId);
      const response = await api.get(`client-api.php?id=${id}&checkFactures=true`);
      
      return {
        success: response.success,
        // ‚úÖ NORMALISATION DU BOOL√âEN aUneFacture
        aUneFacture: toBoolean(response.aUneFacture),
        message: response.message
      };
    } catch (error) {
      console.error(`Erreur lors de la v√©rification des factures du client ${id}:`, error);
      throw error;
    }
  }

  /**
   * V√©rifie si une adresse email est valide
   * @param {string} email Adresse email √† valider
   * @returns {boolean} True si l'email est valide
   */
  isValidEmail(email) {
    // Si le champ est vide, on le consid√®re comme valide (non obligatoire)
    if (!email) {
      return true;
    }
    
    // V√©rification de la longueur (max 254 caract√®res selon RFC)
    if (email.length > 254) {
      return false;
    }
    
    // Expression r√©guli√®re pour validation compl√®te
    const emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    
    return emailRegex.test(String(email).toLowerCase());
  }

  /**
   * D√©tecte le type de num√©ro de t√©l√©phone (suisse ou √©tranger)
   * @param {string} phone Num√©ro √† analyser
   * @returns {Object} Informations sur le num√©ro
   */
  detectPhoneType(phone) {
    // Si le champ est vide, retourner un objet vide
    if (!phone) {
      return {
        isValid: true,
        type: null,
        formattedNumber: ''
      };
    }
    
    // Nettoyer le num√©ro pour l'analyse (garder uniquement les chiffres et le +)
    const cleanedPhone = phone.replace(/[^\d+]/g, '');
    
    // V√©rifier si c'est un num√©ro suisse
    // Format international suisse: +41 suivi de 9 chiffres
    const swissInternationalRegex = /^\+41\d{9}$/;
    // Format national suisse: 0 suivi de 9 chiffres
    const swissNationalRegex = /^0\d{9}$/;
    
    // V√©rifier si c'est un autre num√©ro international (commence par + mais pas +41)
    const otherInternationalRegex = /^\+(?!41)\d{1,3}\d{4,14}$/;
    
    let result = {
      isValid: false,
      type: null,
      formattedNumber: phone
    };
    
    // D√©terminer le type et formater le num√©ro
    if (swissInternationalRegex.test(cleanedPhone)) {
      // Num√©ro suisse au format international
      result.isValid = true;
      result.type = 'swiss';
      
      // Formater: +41 xx xxx xx xx
      const groups = cleanedPhone.match(/^\+41(\d{2})(\d{3})(\d{2})(\d{2})$/);
      if (groups) {
        result.formattedNumber = `+41 ${groups[1]} ${groups[2]} ${groups[3]} ${groups[4]}`;
      }
    } 
    else if (swissNationalRegex.test(cleanedPhone)) {
      // Num√©ro suisse au format national (convertir en international)
      result.isValid = true;
      result.type = 'swiss';
      
      // Convertir en format international et formater
      const internationalNumber = '+41' + cleanedPhone.substring(1);
      const groups = internationalNumber.match(/^\+41(\d{2})(\d{3})(\d{2})(\d{2})$/);
      if (groups) {
        result.formattedNumber = `+41 ${groups[1]} ${groups[2]} ${groups[3]} ${groups[4]}`;
      }
    } 
    else if (otherInternationalRegex.test(cleanedPhone)) {
      // Autre num√©ro international
      result.isValid = true;
      result.type = 'foreign';
      
      // Garder le format tel quel pour les num√©ros √©trangers
      result.formattedNumber = cleanedPhone;
    } 
    else if (cleanedPhone.length >= 8) {
      // Si le num√©ro a au moins 8 chiffres mais ne correspond pas aux formats reconnus
      result.isValid = true;
      result.type = 'foreign';
      result.formattedNumber = cleanedPhone;
    }
    
    return result;
  }

  /**
   * Pr√©pare un num√©ro de t√©l√©phone pour le stockage
   * @param {string} phone Num√©ro de t√©l√©phone
   * @param {string} type Type de num√©ro ('swiss' ou 'foreign')
   * @returns {string} Num√©ro format√© pour le stockage
   * @private
   */
  _cleanPhoneNumber(phone, type = null) {
    if (!phone) {
      return '';
    }
    
    // Si le type n'est pas fourni, le d√©tecter
    if (!type) {
      const phoneInfo = this.detectPhoneType(phone);
      type = phoneInfo.type;
    }
    
    // Nettoyer le num√©ro (garder les chiffres et le +)
    const cleanedPhone = phone.replace(/[^\d+]/g, '');
    
    // Si c'est un num√©ro suisse au format national, le convertir en international
    if (type === 'swiss' && cleanedPhone.startsWith('0')) {
      return '+41' + cleanedPhone.substring(1);
    }
    
    return cleanedPhone;
  }

  /**
   * Vide le cache des clients
   * @private
   */
  _clearCache() {
    this._cacheClient = {};
  }

  /**
   * V√©rifie si un client est th√©rapeute
   * @param {string|number} id ID du client
   * @returns {Promise<boolean>} True si le client est th√©rapeute
   */
  async estTherapeute(id) {
    try {
      // V√©rifier si le client est dans le cache
      if (this._cacheClient[id]) {
        // ‚úÖ UTILISATION DE LA NORMALISATION BOOL√âENNE
        return toBoolean(this._cacheClient[id].estTherapeute);
      }
      
      const client = await this.getClient(id);
      // ‚úÖ UTILISATION DE LA NORMALISATION BOOL√âENNE
      return client ? toBoolean(client.estTherapeute) : false;
    } catch (error) {
      console.error(`Erreur lors de la v√©rification du statut th√©rapeute du client ${id}:`, error);
      return false;
    }
  }
}

export default ClientService;