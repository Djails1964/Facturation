/**
 * Service de gestion des param√®tres - VERSION MISE √Ä JOUR avec gestion des bool√©ens
 * @class ParametreService
 * @description G√®re l'acc√®s aux donn√©es des param√®tres via l'API
 */
import api from './api';
import { toBoolean, toBooleanString, isValidBoolean } from '../utils/booleanHelper'; // ‚úÖ IMPORT du helper

class ParametreService {
  constructor() {
    // Bind des m√©thodes pour s'assurer que 'this' est correctement d√©fini
    this.getAllParametres = this.getAllParametres.bind(this);
    this.getParametre = this.getParametre.bind(this);
    this.updateParametre = this.updateParametre.bind(this);
    this.normalizeParametreValue = this.normalizeParametreValue.bind(this);
    this.normalizeParametresGroup = this.normalizeParametresGroup.bind(this);
    this.prepareParametreForApi = this.prepareParametreForApi.bind(this);
  }

  /**
   * ‚úÖ NORMALISE LA VALEUR D'UN PARAM√àTRE SELON SON TYPE
   * @param {any} value - Valeur √† normaliser
   * @param {string} type - Type du param√®tre ('boolean', 'string', 'number', etc.)
   * @returns {any} - Valeur normalis√©e
   */
  normalizeParametreValue(value, type = 'string') {
    if (value === null || value === undefined) {
      return value;
    }

    switch (type?.toLowerCase()) {
      case 'boolean':
      case 'bool':
        return toBoolean(value);
      
      case 'number':
      case 'int':
      case 'integer':
        return parseInt(value) || 0;
      
      case 'float':
      case 'double':
        return parseFloat(value) || 0;
      
      case 'string':
      case 'text':
      default:
        // Si la valeur ressemble √† un bool√©en, la convertir
        if (isValidBoolean(value)) {
          // Pour les cha√Ænes qui sont clairement des bool√©ens
          const stringValue = String(value).toLowerCase().trim();
          if (['true', 'false', '1', '0', 'yes', 'no', 'oui', 'non', 'on', 'off'].includes(stringValue)) {
            return toBoolean(value);
          }
        }
        return String(value);
    }
  }

  /**
   * ‚úÖ NORMALISE UN GROUPE DE PARAM√àTRES - VERSION CORRIG√âE
   * @param {Object} parametresGroup - Groupe de param√®tres √† normaliser
   * @returns {Object} - Groupe avec valeurs normalis√©es
   */
  normalizeParametresGroup(parametresGroup) {
    if (!parametresGroup || typeof parametresGroup !== 'object') {
      return parametresGroup;
    }

    // üîß CORRECTION: Ne pas traiter les tableaux comme des objets √† normaliser
    if (Array.isArray(parametresGroup)) {
      console.log('‚ö†Ô∏è normalizeParametresGroup re√ßoit un tableau, traitement des √©l√©ments individuellement');
      return parametresGroup.map(param => {
        if (param && typeof param === 'object') {
          return {
            ...param,
            Valeur_parametre: this.normalizeParametreValue(
              param.Valeur_parametre, 
              param.Type_parametre || param.type
            ),
            Actif: param.Actif !== undefined ? toBoolean(param.Actif) : undefined,
            Obligatoire: param.Obligatoire !== undefined ? toBoolean(param.Obligatoire) : undefined,
            Visible: param.Visible !== undefined ? toBoolean(param.Visible) : undefined,
          };
        }
        return param;
      });
    }

    const normalized = {};
    
    for (const [key, parametre] of Object.entries(parametresGroup)) {
      // üîß CORRECTION: V√©rifier si c'est un tableau avant de le traiter
      if (Array.isArray(parametre)) {
        console.log(`‚úÖ Traitement tableau pour ${key}:`, parametre.length, '√©l√©ments');
        // Si c'est un tableau, traiter chaque √©l√©ment individuellement
        normalized[key] = parametre.map(param => {
          if (param && typeof param === 'object') {
            return {
              ...param,
              Valeur_parametre: this.normalizeParametreValue(
                param.Valeur_parametre, 
                param.Type_parametre || param.type
              ),
              Actif: param.Actif !== undefined ? toBoolean(param.Actif) : undefined,
              Obligatoire: param.Obligatoire !== undefined ? toBoolean(param.Obligatoire) : undefined,
              Visible: param.Visible !== undefined ? toBoolean(param.Visible) : undefined,
            };
          }
          return param;
        });
      }
      // Si c'est un objet avec des propri√©t√©s de param√®tre
      else if (parametre && typeof parametre === 'object') {
        // V√©rifier si c'est un param√®tre direct (a Nom_parametre) ou un conteneur
        if (parametre.Nom_parametre) {
          // C'est un param√®tre direct
          normalized[key] = {
            ...parametre,
            Valeur_parametre: this.normalizeParametreValue(
              parametre.Valeur_parametre, 
              parametre.Type_parametre || parametre.type
            ),
            Actif: parametre.Actif !== undefined ? toBoolean(parametre.Actif) : undefined,
            Obligatoire: parametre.Obligatoire !== undefined ? toBoolean(parametre.Obligatoire) : undefined,
            Visible: parametre.Visible !== undefined ? toBoolean(parametre.Visible) : undefined,
          };
        } else {
          // C'est un conteneur, traiter r√©cursivement
          normalized[key] = this.normalizeParametresGroup(parametre);
        }
      } else {
        // Pour tous les autres types, garder tel quel
        normalized[key] = parametre;
      }
    }

    return normalized;
  }


  /**
   * ‚úÖ PR√âPARE UN PARAM√àTRE POUR L'ENVOI √Ä L'API
   * @param {Object} parametreData - Donn√©es du param√®tre
   * @returns {Object} - Donn√©es pr√©par√©es pour l'API
   */
  prepareParametreForApi(parametreData) {
    const prepared = { ...parametreData };

    // Convertir les bool√©ens en cha√Ænes pour l'API si n√©cessaire
    if (typeof prepared.Valeur_parametre === 'boolean') {
      prepared.Valeur_parametre = toBooleanString(prepared.Valeur_parametre);
      console.log('‚úÖ Conversion bool√©en ‚Üí cha√Æne pour API:', 
        parametreData.Valeur_parametre, '‚Üí', prepared.Valeur_parametre);
    }

    // Normaliser d'autres propri√©t√©s bool√©ennes
    if (prepared.Actif !== undefined) {
      prepared.Actif = toBooleanString(prepared.Actif);
    }
    
    if (prepared.Obligatoire !== undefined) {
      prepared.Obligatoire = toBooleanString(prepared.Obligatoire);
    }
    
    if (prepared.Visible !== undefined) {
      prepared.Visible = toBooleanString(prepared.Visible);
    }

    return prepared;
  }

  /**
   * R√©cup√®re tous les param√®tres de tous les groupes
   * @returns {Promise<Object>} Structure compl√®te des param√®tres avec valeurs normalis√©es
   */
  async getAllParametres() {
    try {
      const response = await api.get('parametre-api.php?tousGroupes=true');
      
      if (response && response.success) {
        const parametres = response.parametres || {};
        
        // ‚úÖ NORMALISATION DE TOUS LES GROUPES DE PARAM√àTRES - VERSION SIMPLIFI√âE
        const parametresNormalises = {};
        
        for (const [groupeName, groupeData] of Object.entries(parametres)) {
          console.log(`‚úÖ Normalisation du groupe: ${groupeName}`);
          
          if (groupeData && typeof groupeData === 'object') {
            // üîß CORRECTION: Traitement plus intelligent de la structure
            parametresNormalises[groupeName] = this.normalizeParametresGroup(groupeData);
          } else {
            parametresNormalises[groupeName] = groupeData;
          }
        }
        
        console.log('‚úÖ Param√®tres avant normalisation:', parametres);
        console.log('‚úÖ Param√®tres apr√®s normalisation:', parametresNormalises);
        
        return {
          success: true,
          parametres: parametresNormalises
        };
      }
      
      return {
        success: false,
        message: response?.message || 'Erreur lors de la r√©cup√©ration des param√®tres'
      };
    } catch (error) {
      console.error('Erreur lors du chargement des param√®tres:', error);
      return {
        success: false,
        message: error.message || 'Erreur lors de la r√©cup√©ration des param√®tres'
      };
    }
  }

  /**
   * R√©cup√®re un param√®tre sp√©cifique avec normalisation
   * @param {string} nomParametre Nom du param√®tre
   * @param {string} groupe Groupe du param√®tre
   * @param {string} [sGroupe] Sous-groupe du param√®tre
   * @param {string} [categorie] Cat√©gorie du param√®tre
   * @returns {Promise<Object>} D√©tails du param√®tre avec valeur normalis√©e
   */
  async getParametre(nomParametre, groupe, sGroupe = null, categorie = null) {
    try {
      const params = {
        nomParametre: nomParametre,
        groupe: groupe
      };
      
      if (sGroupe) {
        params.sGroupe = sGroupe;
      }
      
      if (categorie) {
        params.categorie = categorie;
      }
      
      const response = await api.get('parametre-api.php', params);
      
      if (response && response.success) {
        const parametre = response.parametre || {};
        
        // ‚úÖ NORMALISATION DU PARAM√àTRE INDIVIDUEL
        const parametreNormalise = {
          ...parametre,
          Valeur_parametre: this.normalizeParametreValue(
            parametre.Valeur_parametre,
            parametre.Type_parametre || parametre.type
          ),
          // Normaliser d'autres propri√©t√©s bool√©ennes
          Actif: parametre.Actif !== undefined ? toBoolean(parametre.Actif) : undefined,
          Obligatoire: parametre.Obligatoire !== undefined ? toBoolean(parametre.Obligatoire) : undefined,
          Visible: parametre.Visible !== undefined ? toBoolean(parametre.Visible) : undefined,
        };
        
        console.log('‚úÖ Param√®tre avant normalisation:', parametre);
        console.log('‚úÖ Param√®tre apr√®s normalisation:', parametreNormalise);
        
        return {
          success: true,
          parametre: parametreNormalise
        };
      }
      
      return {
        success: false,
        message: response?.message || 'Param√®tre non trouv√©'
      };
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du param√®tre ${nomParametre}:`, error);
      return {
        success: false,
        message: error.message || 'Erreur lors de la r√©cup√©ration du param√®tre'
      };
    }
  }

  /**
   * Met √† jour un param√®tre avec gestion des bool√©ens
   * @param {Object} parametreData Donn√©es du param√®tre √† mettre √† jour
   * @returns {Promise<Object>} R√©sultat de la mise √† jour
   */
  async updateParametre(parametreData) {
    try {
      console.log('‚úÖ Donn√©es d\'entr√©e pour mise √† jour:', parametreData);
      
      // ‚úÖ PR√âPARATION DES DONN√âES AVEC GESTION DES BOOL√âENS
      let dataToSend = this.prepareParametreForApi(parametreData);
      
      // Normaliser les noms de propri√©t√©s pour l'API
      // Correction des noms de propri√©t√©s pour l'API si n√©cessaire
      if (dataToSend.sGroupe_parametre !== undefined) {
        dataToSend.sGroupeParametre = dataToSend.sGroupe_parametre;
        delete dataToSend.sGroupe_parametre;
      }
      
      if (dataToSend.Categorie !== undefined) {
        dataToSend.categorie = dataToSend.Categorie;
        delete dataToSend.Categorie;
      }
      
      console.log('‚úÖ Donn√©es pr√©par√©es pour l\'API:', dataToSend);
      const response = await api.post('parametre-api.php', dataToSend);
      
      return {
        success: response?.success || false,
        message: response?.message || 'Mise √† jour effectu√©e'
      };
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du param√®tre:', error);
      return {
        success: false,
        message: error.message || 'Erreur lors de la mise √† jour du param√®tre'
      };
    }
  }

  /**
   * ‚úÖ M√âTHODES UTILITAIRES POUR LES PARAM√àTRES BOOL√âENS
   */

  /**
   * V√©rifie si un param√®tre bool√©en est activ√©
   * @param {string} nomParametre Nom du param√®tre
   * @param {string} groupe Groupe du param√®tre
   * @param {string} [sGroupe] Sous-groupe du param√®tre
   * @returns {Promise<boolean>} True si le param√®tre est activ√©
   */
  async isParametreActive(nomParametre, groupe, sGroupe = null) {
    try {
      const result = await this.getParametre(nomParametre, groupe, sGroupe);
      
      if (result.success && result.parametre) {
        return toBoolean(result.parametre.Valeur_parametre);
      }
      
      return false;
    } catch (error) {
      console.error(`Erreur lors de la v√©rification du param√®tre ${nomParametre}:`, error);
      return false;
    }
  }

  /**
   * Active ou d√©sactive un param√®tre bool√©en
   * @param {string} nomParametre Nom du param√®tre
   * @param {string} groupe Groupe du param√®tre
   * @param {string} sGroupe Sous-groupe du param√®tre
   * @param {boolean} activer True pour activer, false pour d√©sactiver
   * @returns {Promise<Object>} R√©sultat de la mise √† jour
   */
  async toggleParametreBoolean(nomParametre, groupe, sGroupe, activer) {
    try {
      const parametreData = {
        Nom_parametre: nomParametre,
        Groupe_parametre: groupe,
        sGroupe_parametre: sGroupe,
        Valeur_parametre: activer, // Sera converti en cha√Æne par prepareParametreForApi
      };
      
      return await this.updateParametre(parametreData);
    } catch (error) {
      console.error(`Erreur lors du toggle du param√®tre ${nomParametre}:`, error);
      return {
        success: false,
        message: error.message || 'Erreur lors de la mise √† jour du param√®tre'
      };
    }
  }
}

export default ParametreService;