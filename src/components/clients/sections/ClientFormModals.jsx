// src/components/clients/sections/ClientFormModals.jsx
// Gestion des modales pour le formulaire client - VERSION CORRIG√âE

import React, { useEffect } from 'react';
import { showConfirm } from '../../../utils/modalSystem';

/**
 * Composant pour g√©rer toutes les modales du formulaire client
 * ‚úÖ CORRECTION FINALE : Utilise bien le syst√®me modal unifi√© pour les deux types de navigation
 */
function ClientFormModals({
  showUnsavedModal = false,
  showGlobalModal = false,
  confirmNavigation,
  cancelNavigation,
  handleConfirmGlobalNavigation,
  handleCancelGlobalNavigation,
  hasUnsavedChanges = false,
  clientName = '',
  modalOptions = {},
  navigation = null,
  onRetourListe = null
}) {

  console.log('üìã ClientFormModals - Props re√ßues:', {
    showUnsavedModal,
    showGlobalModal,
    hasUnsavedChanges,
    clientName
  });

  // ================================
  // ‚úÖ MODAL POUR MODIFICATIONS NON SAUVEGARD√âES (Navigation locale - bouton Retour)
  // ================================
  
  useEffect(() => {
    if (showUnsavedModal) {
      console.log('üé≠ ClientFormModals - Affichage modal locale (bouton Retour)');
      
      const modalConfig = {
        title: "Modifications non sauvegard√©es",
        message: `Vous avez des modifications non sauvegard√©es${clientName ? ` pour ${clientName}` : ''}. Souhaitez-vous vraiment quitter sans sauvegarder ?`,
        confirmText: "Quitter sans sauvegarder",
        cancelText: "Continuer l'√©dition",
        type: 'warning',
        size: 'medium',
        ...modalOptions.unsaved
      };

      showConfirm(modalConfig)
        .then((result) => {
          console.log('üé≠ Modal locale - R√©sultat:', result);
          
          if (result.action === 'confirm') {
            console.log('‚úÖ Modal locale confirm√©e - ex√©cution callback');
            confirmNavigation?.();
          } else {
            console.log('‚ùå Modal locale annul√©e');
            cancelNavigation?.();
          }
        })
        .catch((error) => {
          console.error('‚ùå Erreur modal locale:', error);
          cancelNavigation?.();
        });
    }
  }, [showUnsavedModal, confirmNavigation, cancelNavigation, clientName, modalOptions]);

  // ================================
  // ‚úÖ MODAL POUR NAVIGATION GLOBALE (Menu ‚Üí Paiements, etc.)
  // ================================
  
  useEffect(() => {
    if (showGlobalModal) {
      console.log('üé≠ ClientFormModals - Affichage modal globale (navigation menu)');
      
      const modalConfig = {
        title: "Modifications non sauvegard√©es",
        message: `Vous avez des modifications non sauvegard√©es${clientName ? ` pour ${clientName}` : ''}. Souhaitez-vous vraiment quitter sans sauvegarder ?`,
        confirmText: "Quitter sans sauvegarder",
        cancelText: "Continuer l'√©dition",
        type: 'warning',
        size: 'medium',
        ...modalOptions.global
      };

      showConfirm(modalConfig)
        .then((result) => {
          console.log('üé≠ Modal globale - R√©sultat:', result);
          
          if (result.action === 'confirm') {
            console.log('‚úÖ Modal globale confirm√©e - ex√©cution callback de navigation');
            handleConfirmGlobalNavigation?.();
          } else {
            console.log('‚ùå Modal globale annul√©e');
            handleCancelGlobalNavigation?.();
          }
        })
        .catch((error) => {
          console.error('‚ùå Erreur modal globale:', error);
          handleCancelGlobalNavigation?.();
        });
    }
  }, [showGlobalModal, handleConfirmGlobalNavigation, handleCancelGlobalNavigation, clientName, modalOptions]);

  // ================================
  // RENDU
  // ================================

  // Ce composant ne rend rien car il utilise le modalSystem via useEffect
  // Les modales sont cr√©√©es directement par showConfirm()
  return null;
}

export default ClientFormModals;